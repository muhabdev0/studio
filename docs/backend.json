{
  "entities": {
    "Bus": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bus",
      "type": "object",
      "description": "Represents a bus in the fleet.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bus."
        },
        "name": {
          "type": "string",
          "description": "Name or number of the bus."
        },
        "plateNumber": {
          "type": "string",
          "description": "License plate number of the bus."
        },
        "capacity": {
          "type": "number",
          "description": "Maximum passenger capacity of the bus."
        },
        "maintenanceStatus": {
          "type": "string",
          "description": "Current maintenance status of the bus (e.g., 'Operational', 'Under Maintenance').",
          "enum": [
            "Operational",
            "Maintenance",
            "Out of Service"
          ]
        },
        "assignedDriverId": {
          "type": "string",
          "description": "ID of the Driver assigned to this bus."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the bus image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "plateNumber",
        "capacity",
        "maintenanceStatus"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee of the company.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee."
        },
        "fullName": {
          "type": "string",
          "description": "Full name of the employee."
        },
        "role": {
          "type": "string",
          "description": "Role of the employee (e.g., 'Admin', 'Manager', 'Driver', 'Employee').",
          "enum": [
            "Admin",
            "Manager",
            "Driver",
            "Employee",
            "Mechanic"
          ]
        },
        "contactInfo": {
          "type": "string",
          "description": "Contact information of the employee (e.g., phone number, email)."
        },
        "salary": {
          "type": "number",
          "description": "Salary of the employee."
        },
        "profilePhotoUrl": {
          "type": "string",
          "description": "URL of the employee's profile photo.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "fullName",
        "role",
        "contactInfo",
        "salary"
      ]
    },
    "Trip": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Trip",
      "type": "object",
      "description": "Represents a scheduled trip.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the trip."
        },
        "from": {
          "type": "string",
          "description": "Starting location of the trip."
        },
        "to": {
          "type": "string",
          "description": "Destination of the trip."
        },
        "dateTime": {
          "type": "string",
          "description": "Date and time of the trip.",
          "format": "date-time"
        },
        "price": {
          "type": "number",
          "description": "Price of a ticket for the trip."
        },
        "driverId": {
          "type": "string",
          "description": "ID of the Driver assigned to this trip."
        },
        "busId": {
          "type": "string",
          "description": "ID of the Bus assigned to this trip."
        },
        "status": {
          "type": "string",
          "enum": [
            "Scheduled",
            "In Progress",
            "Completed",
            "Cancelled"
          ]
        },
        "totalSeats": {
          "type": "number"
        },
        "bookedSeats": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      },
      "required": [
        "id",
        "from",
        "to",
        "dateTime",
        "price",
        "driverId",
        "busId",
        "status",
        "totalSeats"
      ]
    },
    "TicketBooking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TicketBooking",
      "type": "object",
      "description": "Represents a ticket booking made by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ticket booking."
        },
        "tripId": {
          "type": "string",
          "description": "Reference to the Trip for this booking."
        },
        "customerName": {
          "type": "string",
          "description": "Name of the customer who booked the ticket."
        },
        "seatNumber": {
          "type": "number",
          "description": "Seat number assigned to the customer."
        },
        "price": {
          "type": "number"
        },
        "bookingDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": [
            "Confirmed",
            "Pending",
            "Cancelled"
          ]
        }
      },
      "required": [
        "id",
        "tripId",
        "customerName",
        "seatNumber",
        "price",
        "bookingDate",
        "status"
      ]
    },
    "FinanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinanceRecord",
      "type": "object",
      "description": "Represents a financial record, either income or expense.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the financial record."
        },
        "type": {
          "type": "string",
          "description": "Type of financial record ('income' or 'expense').",
          "enum": [
            "Income",
            "Expense"
          ]
        },
        "category": {
          "type": "string",
          "description": "Category of the financial record (e.g., 'ticket sales', 'salaries', 'maintenance', 'rent')."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the financial record."
        },
        "date": {
          "type": "string",
          "description": "Date of the financial record.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the finance record"
        }
      },
      "required": [
        "id",
        "type",
        "category",
        "amount",
        "date"
      ]
    }
  },
  "auth": {
    "providers": [
      "password"
    ]
  },
  "firestore": {
    "/employees/{employeeId}": {
      "schema": {
        "$ref": "#/entities/Employee"
      },
      "description": "Stores employee profiles.",
      "rules": {
        "read": "request.auth != null",
        "write": "request.auth != null"
      }
    },
    "/buses/{busId}": {
      "schema": {
        "$ref": "#/entities/Bus"
      },
      "description": "Stores bus information.",
      "rules": {
        "read": "request.auth != null",
        "write": "request.auth != null"
      }
    },
    "/trips/{tripId}": {
      "schema": {
        "$ref": "#/entities/Trip"
      },
      "description": "Stores trip details.",
      "rules": {
        "read": "request.auth != null",
        "write": "request.auth != null"
      }
    },
    "/ticketBookings/{ticketBookingId}": {
      "schema": {
        "$ref": "#/entities/TicketBooking"
      },
      "description": "Stores ticket booking information for a specific trip.",
      "rules": {
        "read": "request.auth != null",
        "write": "request.auth != null"
      }
    },
    "/financeRecords/{financeRecordId}": {
      "schema": {
        "$ref": "#/entities/FinanceRecord"
      },
      "description": "Stores financial records.",
      "rules": {
        "read": "request.auth != null",
        "write": "request.auth != null"
      }
    }
  }
}