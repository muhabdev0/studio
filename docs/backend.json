{
  "entities": {
    "Bus": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bus",
      "type": "object",
      "description": "Represents a bus in the fleet.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bus."
        },
        "nameNumber": {
          "type": "string",
          "description": "Name or number of the bus."
        },
        "plateNumber": {
          "type": "string",
          "description": "License plate number of the bus."
        },
        "capacity": {
          "type": "number",
          "description": "Maximum passenger capacity of the bus."
        },
        "maintenanceStatus": {
          "type": "string",
          "description": "Current maintenance status of the bus (e.g., 'Operational', 'Under Maintenance')."
        },
        "assignedDriverId": {
          "type": "string",
          "description": "Reference to the Driver assigned to this bus. (Relationship: Driver 1:N Bus)"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the bus image stored in Firebase Storage.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "nameNumber",
        "plateNumber",
        "capacity",
        "maintenanceStatus"
      ]
    },
    "Employee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Employee",
      "type": "object",
      "description": "Represents an employee of the company.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the employee."
        },
        "fullName": {
          "type": "string",
          "description": "Full name of the employee."
        },
        "role": {
          "type": "string",
          "description": "Role of the employee (e.g., 'Admin', 'Manager', 'Driver', 'Employee')."
        },
        "contactInfo": {
          "type": "string",
          "description": "Contact information of the employee (e.g., phone number, email)."
        },
        "salary": {
          "type": "number",
          "description": "Salary of the employee."
        },
        "profilePhotoUrl": {
          "type": "string",
          "description": "URL of the employee's profile photo stored in Firebase Storage.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "fullName",
        "role",
        "contactInfo",
        "salary"
      ]
    },
    "Trip": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Trip",
      "type": "object",
      "description": "Represents a scheduled trip.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the trip."
        },
        "routeFrom": {
          "type": "string",
          "description": "Starting location of the trip."
        },
        "routeTo": {
          "type": "string",
          "description": "Destination of the trip."
        },
        "assignedBusId": {
          "type": "string",
          "description": "Reference to the Bus assigned to this trip. (Relationship: Bus 1:N Trip)"
        },
        "assignedDriverId": {
          "type": "string",
          "description": "Reference to the Driver assigned to this trip. (Relationship: Driver 1:N Trip)"
        },
        "dateTime": {
          "type": "string",
          "description": "Date and time of the trip.",
          "format": "date-time"
        },
        "ticketPrice": {
          "type": "number",
          "description": "Price of a ticket for the trip."
        },
        "availableSeats": {
          "type": "number",
          "description": "Number of seats available on the trip."
        }
      },
      "required": [
        "id",
        "routeFrom",
        "routeTo",
        "assignedBusId",
        "assignedDriverId",
        "dateTime",
        "ticketPrice",
        "availableSeats"
      ]
    },
    "TicketBooking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TicketBooking",
      "type": "object",
      "description": "Represents a ticket booking made by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ticket booking."
        },
        "tripId": {
          "type": "string",
          "description": "Reference to the Trip associated with this ticket booking. (Relationship: Trip 1:N TicketBooking)"
        },
        "customerName": {
          "type": "string",
          "description": "Name of the customer who booked the ticket."
        },
        "seatNumber": {
          "type": "number",
          "description": "Seat number assigned to the customer."
        },
        "price": {
          "type": "number",
          "description": "Price paid for the ticket."
        }
      },
      "required": [
        "id",
        "tripId",
        "customerName",
        "seatNumber",
        "price"
      ]
    },
    "FinanceRecord": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FinanceRecord",
      "type": "object",
      "description": "Represents a financial record, either income or expense.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the financial record."
        },
        "type": {
          "type": "string",
          "description": "Type of financial record ('income' or 'expense')."
        },
        "category": {
          "type": "string",
          "description": "Category of the financial record (e.g., 'ticket sales', 'salaries', 'maintenance', 'rent')."
        },
        "amount": {
          "type": "number",
          "description": "Amount of the financial record."
        },
        "date": {
          "type": "string",
          "description": "Date of the financial record.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the finance record"
        }
      },
      "required": [
        "id",
        "type",
        "category",
        "amount",
        "date"
      ]
    },
    "Driver": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Driver",
      "type": "object",
      "description": "Represents a driver.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the driver."
        },
        "employeeId": {
          "type": "string",
          "description": "Reference to the Employee record for this driver. (Relationship: Employee 1:1 Driver)"
        }
      },
      "required": [
        "id",
        "employeeId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/employees/{employeeId}",
        "definition": {
          "entityName": "Employee",
          "schema": {
            "$ref": "#/backend/entities/Employee"
          },
          "description": "Stores employee profiles. Path-based ownership, where each employee can only access their profile.",
          "params": [
            {
              "name": "employeeId",
              "description": "The unique identifier for the employee."
            }
          ]
        }
      },
      {
        "path": "/drivers/{driverId}",
        "definition": {
          "entityName": "Driver",
          "schema": {
            "$ref": "#/backend/entities/Driver"
          },
          "description": "Stores driver profiles. Each driver document contains a reference to employeeId.",
          "params": [
            {
              "name": "driverId",
              "description": "The unique identifier for the driver."
            }
          ]
        }
      },
      {
        "path": "/buses/{busId}",
        "definition": {
          "entityName": "Bus",
          "schema": {
            "$ref": "#/backend/entities/Bus"
          },
          "description": "Stores bus information.  Admin/Manager roles will have access. Consider adding a 'members' map if bus-specific permissions are needed.",
          "params": [
            {
              "name": "busId",
              "description": "The unique identifier for the bus."
            }
          ]
        }
      },
      {
        "path": "/trips/{tripId}",
        "definition": {
          "entityName": "Trip",
          "schema": {
            "$ref": "#/backend/entities/Trip"
          },
          "description": "Stores trip details.  Includes denormalized 'members' map for authorization independence. This map defines which users can manage or view ticket bookings for this trip. Authorization rules will check against the members map to determine access.",
          "params": [
            {
              "name": "tripId",
              "description": "The unique identifier for the trip."
            }
          ]
        }
      },
      {
        "path": "/trips/{tripId}/ticketBookings/{ticketBookingId}",
        "definition": {
          "entityName": "TicketBooking",
          "schema": {
            "$ref": "#/backend/entities/TicketBooking"
          },
          "description": "Stores ticket booking information for a specific trip. Access is controlled by the 'members' map denormalized into the parent /trips/{tripId} document. The members map contains the UIDs of users who have authorization to manage or view these bookings.",
          "params": [
            {
              "name": "tripId",
              "description": "The unique identifier for the trip."
            },
            {
              "name": "ticketBookingId",
              "description": "The unique identifier for the ticket booking."
            }
          ]
        }
      },
      {
        "path": "/financeRecords/{financeRecordId}",
        "definition": {
          "entityName": "FinanceRecord",
          "schema": {
            "$ref": "#/backend/entities/FinanceRecord"
          },
          "description": "Stores financial records.  Admin/Manager roles will have access. This collection is flat and doesn't have a parent-child relationship.",
          "params": [
            {
              "name": "financeRecordId",
              "description": "The unique identifier for the financial record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the SwiftRoute application's core features, focusing on security, scalability, and ease of debugging.  Authorization Independence is achieved through denormalization, eliminating the need for `get()` calls in security rules.  Structural Segregation ensures that each collection has a homogeneous security posture. Access Modeling follows consistent patterns for private, user-owned, and collaborative data. The key collections and their structures are designed to support efficient data retrieval and secure access control.\n\n**Authorization Independence & QAPs:**\n\n*   **Employees & Drivers:** Employee data is stored in `/employees/{employeeId}`. Driver data contains a reference to the employeeId in the `/drivers/{driverId}` collection. This is path-based ownership and is inherently secure.\n*   **Buses:** Bus data is stored in `/buses/{busId}`. There's a denormalized `assignedDriverId` field, but since a driver's permissions don't cascade to a bus, this is primarily for data consistency.\n*   **Trips:** Trip data is stored in `/trips/{tripId}`. Trip assignments are managed through denormalized `assignedBusId` and `assignedDriverId`.  While these are references, they don't create authorization dependencies; rules can validate that the user creating/modifying the trip has permissions to manage trips in general, without needing to check the bus or driver details.\n*   **TicketBookings:** Ticket bookings are stored in `/trips/{tripId}/ticketBookings/{ticketBookingId}`. Because bookings are owned by the trip, the trip must contain denormalized authorization data to achieve Authorization Independence. Specifically, trips should contain a `members` map to define who can view/modify bookings related to the trip.\n*   **FinanceRecords:** Finance records are stored in `/financeRecords/{financeRecordId}`. These records are globally accessible by admin-level employees.\n\n**Data Access and List Operations (QAPs):**\n\nThe data structure promotes secure list operations by segregating data based on access requirements. Path-based ownership for employees and drivers allows listing operations to be secured based on the user's ID. For buses and trips, global roles or membership maps within the collections can be utilized to filter list operations based on user roles or permissions. Because access control data is denormalized directly onto the records, filtering is secure.\n"
  }
}