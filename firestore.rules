/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control, primarily restricting write access to admins while allowing broader read access.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /buses/{busId}: Stores bus information.
 * - /trips/{tripId}: Stores trip details.
 * - /trips/{tripId}/ticketBookings/{ticketBookingId}: Stores ticket booking information.
 * - /financeRecords/{financeRecordId}: Stores financial records.
 *
 * Key Security Decisions:
 * - Only authenticated users can create ticket bookings.
 * - Admins have full read and write access to all collections.
 * - Data validation is relaxed in this prototyping phase to facilitate rapid development.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @dev In a real application, this would likely involve a lookup against a user roles collection.
     */
    function isAdmin() {
      // TODO: Implement admin role check. This is a placeholder.
      return false;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Combines ownership check with existence check for update/delete operations.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Defines access rules for employee profiles.
     * @path /employees/{employeeId}
     * @allow (get, list): Anyone can read employee data.
     * @allow (create, update, delete): Only admins can modify employee data.
     * @deny (create, update, delete): Non-admins cannot modify employee data.
     * @principle Enforces admin-only writes for employee data.
     */
    match /employees/{employeeId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for bus information.
     * @path /buses/{busId}
     * @allow (get, list): Anyone can read bus data.
     * @allow (create, update, delete): Only admins can modify bus data.
     * @deny (create, update, delete): Non-admins cannot modify bus data.
     * @principle Enforces admin-only writes for bus data.
     */
    match /buses/{busId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for trip details.
     * @path /trips/{tripId}
     * @allow (get, list): Anyone can read trip data.
     * @allow (create, update, delete): Only admins can modify trip data.
     * @deny (create, update, delete): Non-admins cannot modify bus data.
     * @principle Enforces admin-only writes for trip data.
     */
    match /trips/{tripId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for ticket booking information.
     * @path /trips/{tripId}/ticketBookings/{ticketBookingId}
     * @allow (get, list): Anyone can read ticket booking data.
     * @allow create: if isSignedIn();
     * @allow update, delete: if isAdmin();
     * @deny create: if !isSignedIn();
     * @deny update, delete: if !isAdmin();
     * @principle Allows authenticated users to create ticket bookings, while restricting modifications to admins.
     */
    match /trips/{tripId}/ticketBookings/{ticketBookingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for financial records.
     * @path /financeRecords/{financeRecordId}
     * @allow (get, list): Anyone can read financial record data.
     * @allow (create, update, delete): Only admins can modify financial record data.
     * @deny (create, update, delete): Non-admins cannot modify financial record data.
     * @principle Enforces admin-only writes for financial records.
     */
    match /financeRecords/{financeRecordId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}