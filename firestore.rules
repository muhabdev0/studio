/**
 * @file Overview
 * This ruleset enforces a simple authenticated access model. All read and write
 * operations require the user to be signed in. It does not impose any role-based
 * restrictions or data validation beyond authentication.
 *
 * Data Structure:
 * The database consists of top-level collections for 'employees', 'buses', 'trips',
 * 'ticketBookings', and 'financeRecords'. Each collection contains documents
 * representing individual entities.
 *
 * Key Security Decisions:
 * - All collections are readable and writeable by any authenticated user.
 * - No data validation is performed, allowing for flexible data shapes during prototyping.
 *
 * WARNING: These rules are for PROTOTYPING ONLY.
 *          They provide minimal security and are intended for rapid iteration,
 *          not production deployment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write employee profiles.
     * @path /employees/{employeeId}
     * @allow (read, write): if request.auth != null (any authenticated user can read/write)
     * @deny (read, write): if request.auth == null (unauthenticated users cannot read/write)
     * @principle Authenticated access to employee data.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write bus information.
     * @path /buses/{busId}
     * @allow (read, write): if request.auth != null (any authenticated user can read/write)
     * @deny (read, write): if request.auth == null (unauthenticated users cannot read/write)
     * @principle Authenticated access to bus data.
     */
    match /buses/{busId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write trip details.
     * @path /trips/{tripId}
     * @allow (read, write): if request.auth != null (any authenticated user can read/write)
     * @deny (read, write): if request.auth == null (unauthenticated users cannot read/write)
     * @principle Authenticated access to trip data.
     */
    match /trips/{tripId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write ticket booking information.
     * @path /ticketBookings/{ticketBookingId}
     * @allow (read, write): if request.auth != null (any authenticated user can read/write)
     * @deny (read, write): if request.auth == null (unauthenticated users cannot read/write)
     * @principle Authenticated access to ticket booking data.
     */
    match /ticketBookings/{ticketBookingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write finance records.
     * @path /financeRecords/{financeRecordId}
     * @allow (read, write): if request.auth != null (any authenticated user can read/write)
     * @deny (read, write): if request.auth == null (unauthenticated users cannot read/write)
     * @principle Authenticated access to finance record data.
     */
    match /financeRecords/{financeRecordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}